- hosts: localhost
  connection: local
  gather_facts: false
  environment: 
    "{{proxy_env}}"
  tasks:
  - name: Include vars of client.
    include_vars:
      dir: "{{config_dir}}"
      extensions: 
      - yml
      name: client_params
  - name: Create a new ec2 key pair
    ec2_key:
      name: "{{client_params.client_name}}_keypair"
      force: false
    register: keypair
  - copy: 
      content: "{{ keypair.key.private_key }}" 
      dest: "{{params.output_folder}}/{{client_params.client_name}}_key.pem"
    when: keypair.changed
  - name: Security group rule descriptions
    ec2_group:
      name: "{{ client_params.client_name }}_sg"
      description: "sg for {{client_params.client_name}}"
      vpc_id: "{{ client_params.vpc_id }}"
      rules:
        - proto: tcp
          ports:
          - 22
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on port 22  
  - name: Provision a set of instances
    ec2:
      key_name: "{{client_params.client_name}}_keypair"
      group: "{{ client_params.client_name }}_sg"
      instance_type: "{{client_params.instance_type}}"
      image: "{{ client_params.ami_id }}"
      region: "{{ client_params.region }}"
      wait: true
      exact_count: "{{client_params.instances}}"
      count_tag:
        Name: Demo
      instance_tags:
        Name: Demo
    register: ec2
  - debug: var=ec2
  - name: Add all instance public IPs to host group
    add_host: 
      name: "{{ item.dns_name }}"
      groups: "ec2hosts"
      public_ip: "{{ item.public_ip }}"
    loop: "{{ ec2.tagged_instances }}"
  - name: Update inventory file
    template:
      src: templates/ansible-hosts.j2
      dest: "{{params.output_folder}}/hosts"
#  - name: Wait for SSH to come up
#    wait_for:
#      host: '{{ item.dns_name }}'
#      port: 22
#      delay: 60
#      timeout: 320
#      state: started
#    with_items: '{{ ec2.tagged_instances }}'

